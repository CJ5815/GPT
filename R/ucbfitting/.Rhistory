p<-d
dprop$lik<- -2*sum(log(p[cbind(1:nrow(p), simdata$chosen)]+0.00001))
rownames(dprop)<-NULL
maximizers<-rbind(maximizers, dprop)
print(maximizers)
}
}
which.mon(gaussprocess$ZZ.km)
which.min(gaussprocess$ZZ.km)
candidates[which.min(gaussprocess$ZZ.km),]
gaussprocess$ZZ.km[which.min(gaussprocess$ZZ.km),]
gaussprocess$ZZ.km[which.min(gaussprocess$ZZ.km)]
rm(list=ls())
packages <- c('tgp', 'microbenchmark', 'ggplot2')
lapply(packages, library, character.only = TRUE)
setwd("/home/hanshalbe/Desktop/GPT/R/ucbfitting")
source("iowasim.R")
source("iowapropcheck.R")
candidates<-expand.grid(alpha=seq(0,1, 0.1), weight=seq(0,1, 0.1), consistency=seq(0,1,0.1))
simdata<-iowasim(alpha=0.2, consistency = 0.9, weight=0.5, trials=150)
maximizers<-candidates[sample(1:nrow(candidates),10),]
maximizers$lik<-0
for (i in 1:100){
if(i <10){
d<-iowapropcheck(collect = simdata,
alpha = maximizers$alpha[i],
weight = maximizers$weight[i],
consistency = maximizers$consistency[i])
p<-d
maximizers$lik[i]<- -2*sum(log(p[cbind(1:nrow(p), simdata$chosen)]+0.00001))
} else{
gaussprocess<-bgp(X=maximizers[,1:3], Z=maximizers$lik, XX=candidates)
lcb<-gaussprocess$ZZ.km-3*sqrt(gaussprocess$ZZ.vark)
dprop<-candidates[which.min(lcb),]
d<-iowapropcheck(collect = simdata,
alpha = dprop$alpha,
weight = dprop$weight,
consistency = dprop$consistency)
p<-d
dprop$lik<- -2*sum(log(p[cbind(1:nrow(p), simdata$chosen)]+0.00001))
rownames(dprop)<-NULL
maximizers<-rbind(maximizers, dprop)
print(maximizers)
}
}
candidates<-expand.grid(alpha=seq(0.1,0.9, 0.1), weight=seq(0.1,1, 0.1), consistency=seq(0,0.9,0.1))
candidates
simdata<-iowasim(alpha=0.2, consistency = 0.8, weight=0.5, trials=150)
simdata
maximizers<-candidates[sample(1:nrow(candidates),10),]
maximizers$lik<-0
for (i in 1:100){
if(i <10){
d<-iowapropcheck(collect = simdata,
alpha = maximizers$alpha[i],
weight = maximizers$weight[i],
consistency = maximizers$consistency[i])
p<-d
maximizers$lik[i]<- -2*sum(log(p[cbind(1:nrow(p), simdata$chosen)]+0.00001))
} else{
gaussprocess<-bgp(X=maximizers[,1:3], Z=maximizers$lik, XX=candidates)
lcb<-gaussprocess$ZZ.km-3*sqrt(gaussprocess$ZZ.vark)
dprop<-candidates[which.min(lcb),]
d<-iowapropcheck(collect = simdata,
alpha = dprop$alpha,
weight = dprop$weight,
consistency = dprop$consistency)
p<-d
dprop$lik<- -2*sum(log(p[cbind(1:nrow(p), simdata$chosen)]+0.00001))
rownames(dprop)<-NULL
maximizers<-rbind(maximizers, dprop)
print(maximizers)
}
}
gaussprocess$ZZ.km[which.min(gaussprocess$ZZ.km)]
candidates[which.min(gaussprocess$ZZ.km),]
?bgp
rm(list=ls())
packages <- c('tgp', 'microbenchmark', 'ggplot2')
lapply(packages, library, character.only = TRUE)
setwd("/home/hanshalbe/Desktop/GPT/R/ucbfitting")
source("iowasim.R")
source("iowapropcheck.R")
candidates<-expand.grid(alpha=seq(0.1,0.9, 0.1), weight=seq(0.1,1, 0.1), consistency=seq(0,0.9,0.1))
simdata<-iowasim(alpha=0.2, consistency = 0.8, weight=0.5, trials=150)
maximizers<-candidates[sample(1:nrow(candidates),10),]
maximizers$lik<-0
for (i in 1:500){
if(i <10){
d<-iowapropcheck(collect = simdata,
alpha = maximizers$alpha[i],
weight = maximizers$weight[i],
consistency = maximizers$consistency[i])
p<-d
maximizers$lik[i]<- -2*sum(log(p[cbind(1:nrow(p), simdata$chosen)]+0.00001))
} else{
gaussprocess<-bgp(X=maximizers[,1:3], Z=maximizers$lik, XX=candidates)
lcb<-gaussprocess$ZZ.km-3*sqrt(gaussprocess$ZZ.vark)
dprop<-candidates[which.min(lcb),]
d<-iowapropcheck(collect = simdata,
alpha = dprop$alpha,
weight = dprop$weight,
consistency = dprop$consistency)
p<-d
dprop$lik<- -2*sum(log(p[cbind(1:nrow(p), simdata$chosen)]))
rownames(dprop)<-NULL
maximizers<-rbind(maximizers, dprop)
print(maximizers)
}
}
maximizers
candidates[which.min(gaussprocess$ZZ.km),]
require(MASS)
require(reshape2)
require(ggplot2)
set.seed(12345)
#obs <- data.frame(x=gdp$YEAR,y=gdp$CANADA)
#x_predict <- seq(min(gdp$YEAR),max(gdp$YEAR),len=50)
x_predict <- seq(-5,5,len=50)
l <- 1
SE <- function(Xi,Xj, l) exp(-0.5 * (Xi - Xj) ^ 2 / l ^ 2)
cov <- function(X, Y) outer(X, Y, SE, l)
COV <- cov(x_predict, x_predict)
values <- mvrnorm(3, rep(0, length=length(x_predict)), COV)
dat <- data.frame(x=x_predict, t(values))
dat <- melt(dat, id="x")
head(dat)
#Prior Distribution
fig2a <- ggplot(dat,aes(x=x,y=value)) +
geom_rect(xmin=-Inf, xmax=Inf, ymin=-2, ymax=2, fill="grey80") +
geom_line(aes(group=variable)) +   theme_bw() +
scale_y_continuous(lim=c(-3,3), name="output, f(x)") +
xlab("input, x")
fig2a
#Zero noise model
obs <- data.frame(x = c(-4, -3,-1,0,2),
y = c(-2,  0,  1,  2, -1))
#obs <- data.frame(x=gdp$YEAR,y=gdp$CANADA)
cov_xx_inv <- solve(cov(obs$x, obs$x))
Ef <- cov(x_predict, obs$x) %*% cov_xx_inv %*% obs$y
Cf <- cov(x_predict, x_predict) - cov(x_predict, obs$x)  %*% cov_xx_inv %*% cov(obs$x, x_predict)
dim(x_predict)
dim(obs$x)
values <- mvrnorm(10, Ef, Cf)
dat <- data.frame(x=x_predict, t(values))
dat <- melt(dat, id="x")
fig2b <- ggplot(dat,aes(x=x,y=value)) +
geom_ribbon(data=NULL,
aes(x=x_predict, y=Ef, ymin=(Ef-2*sqrt(diag(Cf))), ymax=(Ef+2*sqrt(diag(Cf)))),
fill="grey80") +
geom_line(aes(color=variable)) + #REPLICATES
geom_line(data=NULL,aes(x=x_predict,y=Ef), size=1) + #MEAN
geom_point(data=obs,aes(x=x,y=y)) +  #OBSERVED DATA
scale_y_continuous(lim=c(-3,3), name="output, f(x)") +
xlab("input, x")
fig2b
plot(gdp$YEAR,gdp$CANADA)
sigma.n <- 0.25
cov_xx_inv <- solve(cov(obs$x, obs$x) + sigma.n^2 * diag(1, length(obs$x)))
Ef1 <- cov(x_predict, obs$x) %*% cov_xx_inv %*% obs$y
Cf1 <- cov(x_predict, x_predict) - cov(x_predict, obs$x)  %*% cov_xx_inv %*% cov(obs$x, x_predict)
values <- mvrnorm(3, Ef1, Cf1)
dat <- data.frame(x=x_predict, t(values))
dat <- melt(dat, id="x")
fig2c <- ggplot(dat,aes(x=x,y=value)) +
geom_ribbon(data=NULL,
aes(x=x_predict, y=Ef1, ymin=(Ef1-2*sqrt(diag(Cf1))), ymax=(Ef1+2*sqrt(diag(Cf1)))),
fill="grey80") + # Var
geom_line(aes(color=variable)) + #REPLICATES
geom_line(data=NULL,aes(x=x_predict,y=Ef1), size=1) + #MEAN
geom_point(data=obs,aes(x=x,y=y)) +  #OBSERVED DATA
scale_y_continuous(lim=c(-3,3), name="output, f(x)") +
xlab("input, x")+
theme_bw()
fig2c
library(GPfit)
?GP_fit
GP_fit(X=maximizers[,1:3], Y=maximizers$lik)
m<-GP_fit(X=maximizers[,1:3], Y=maximizers$lik)
predict(m)
predict(m, candidates)
p<-predict(m, candidates)
p
head(p)
mat<-matrix(rnorm(1e6), nrow=100, ncol=100)
head(p)
head(p, 10)
str(p)
head(1:inf)
head(1:Inf)
head(1:Inf, 100)
head(0:100/0:100, 10)
head(0:100/100:0, 10)
length(matrix(0, nrow=10, ncol=10))
z <- 1/0
is.na(z)
amazingstop <- function(x, y) {
x + 20
}
amazingstop(10, stop("Eric is amazing!"))
amazingstop <- function(x, y) {
x + 20
y<-y
}
amazingstop(10, stop("Eric is amazing!"))
twice<-function(myfun, n)
while(n<0){
newfun<-function<-myfun(myfun())
n<-n-1
}
return(myfun)
}
twice<-function(myfun, n){
while(n<0){
newfun<-function<-myfun(myfun())
n<-n-1
}
return(myfun)
}
twice<-function(myfun, n){
while(n<0){
newfun<-function<-myfun(myfun())
twice<-function(myfun, n){
while(n<0){
newfun<-function() myfun(myfun())
n<-n-1
}
return(myfun)
}
add<-function(x,y) x + y
new<-twice(add, 3)
increment<-function(x) x + 1
new<-twice(increment, 3)
new(6)
new
twice<-function(myfun, n){
while(n<0){
newfun<-function() myfun(myfun())
n<-n-1
}
return(newfun)
}
increment<-function(x) x + 1
new<-twice(increment, 3)
twice<-function(myfun, n){
while(n>0){
newfun<-function() myfun(myfun())
n<-n-1
}
return(newfun)
}
increment<-function(x) x + 1
new<-twice(increment, 3)
new(6)
new
new<-twice(myfun=increment, 3)
new(6)
new
increment(increment(2))
new<-twice(myfun=increment, 2)
new(6)
increment<-function(x) x + 1
new<-twice(myfun=increment, n=2, x=1)
twice<-function(myfun, n, x){
while(n>0){
newfun<-function() myfun(myfun(x))
n<-n-1
}
return(newfun)
}
increment<-function(x) x + 1
new<-twice(myfun=increment, n=2, x=1)
new
new(2)
new(x=2)
is.na(z)
f <- function(x) {
f <- function(x) {
f <- function(x) {
x ^ 2
}
f(x) + 1
}
f(x) * 2
}
f(10)
x <- seq(0, 2 * pi, length = 100)
sinx <- sin(x)
plot(x, sinx, type = "l")
x <- seq(0, 10)
mycubic <- function(x){
x+x^2+x^3
}
plot(x, mycubic, type = "l")
x <- seq(0, 10)
mycubic <- function(x){
x+x^2+x^3
}
plot(x, mycubic, type = "l")
mycubic
x <- seq(0, 10)
plot(x, mycubic, type = "l")
eval(quote(eval(quote(eval(quote(2 + 2))))))
eval(quote(eval(quote(eval(quote(2 + 2))))))
substitute(a + b, list(a = 1, b = quote(x)))
1 + x
x
g <- local({
k <- function(y)f(y)
f <- function(x) if(x) x*k(x-1) else 1
})
gg(10)
sapply(1:5, gg)
g <- local({
k <- function(y)f(y)
f <- function(x) if(x) x*k(x-1) else 1
})
gg(10)
gg <- local({
k <- function(y)f(y)
f <- function(x) if(x) x*k(x-1) else 1
})
gg(10)
sapply(1:5, gg)
?local
gg <- local({
k <- function(y) f(y)
f <- function(x) if(x) x * k(x-1) else 2
})
gg(10)
k <- function(y) f(y)
f <- function(x) if(x) x * k(x-2) else 2
})
gg <- local({
k <- function(y) f(y)
f <- function(x) if(x) x * k(x-2) else 2
})
gg(10)
sapply(1:5, gg)
gg <- local({
k <- function(y) f(y)
f <- function(x) if(x) x * k(x-1) else 2
})
gg(10)
sapply(1:5, gg)
sapply(1:6, gg)
mutual <- local({
f <- function(y) g(y)
g <- function(x) if(x) x * k(x-1) else 2
})
sapply(1:6, mutual)
mutual <- local({
f <- function(y) g(y)
g <- function(x) if(x) x * f(x-1) else 1
})
sapply(1:6, mutual)
mtcars
lm(mpg~carb+gear, data=mtcars)
m<-lm(mpg~carb+gear, data=mtcars)
summary(m)
myframe <- data.frame(x = rep(0, 100), y = -100:-1, z = seq(0.01, 1, 0.1))
attach(myframe)
x <- x + y + z
myframe <- data.frame(a = rep(0, 100), b = -100:-1, c = seq(0.01, 1, 0.1))
attach(myframe)
a <- b + c + a
detach(myframe)
print(myframe$x)
myframe <- data.frame(a = rep(0, 100), b = -100:-1, c = seq(0.01, 1, 0.1))
attach(myframe)
myframe <- data.frame(a1 = rep(0, 100), a2 = -100:-1, a3 = seq(0.01, 1, 0.1))
attach(myframe)
a1 <- a2 + a3 + a1
print(myframe$x)
print(myframe$a1)
x<-[[1,2], [2,1]]
x<-list([1,2] , [2,1])
x<-list((1,2) , (2,1))
x<-list(c(1,2) , c(2,1))
x
mtcars
hist(mtcars$mpg)
truehist(mtcars$mpg)
hist(mtcars$mpg)
library(MASS)
truehist(mtcars$mpg)
?rlm
library(dplyr)
library(nycflights13)
install.packages("nycflights13")
library(nycflights13)
filter(
summarise(
select(
group_by(flights, year, month, day),
arr_delay, dep_delay
),
arr = mean(arr_delay, na.rm = TRUE),
dep = mean(dep_delay, na.rm = TRUE)
),
arr > 30 | dep > 30
)
data <- filter(
summarise(
select(
group_by(flights, year, month, day),
arr_delay, dep_delay
),
arr = mean(arr_delay, na.rm = TRUE),
dep = mean(dep_delay, na.rm = TRUE)
),
arr > 30 | dep > 30
)
data
head(data,100)
data$year
packages <- c('dplyr', 'nycflights13')
lapply(packages, library, character.only = TRUE)
data <- filter(
summarise(
select(
group_by(flights, year, month, day),
arr_delay, dep_delay
),
arr = mean(arr_delay, na.rm = TRUE),
dep = mean(dep_delay, na.rm = TRUE)
),
arr > 30 | dep > 30
)
mtcars
allcomps2<-function(dat){
combos <- combn(nrow(dat), 2)
dlearn<-adply(combos, 2, function(x) {
out <- data.frame(dat[x[1] , ] - ddat[x[2] , ])
return(out)
}
)
}
allcomps(mtcars)
allcomps2<-function(dat){
combos <- combn(nrow(dat), 2)
dlearn<-adply(combos, 2, function(x) {
out <- data.frame(dat[x[1] , ] - ddat[x[2] , ])
return(out)
}
)
}
allcomps2(mtcars)
??adply
library(plyr)
allcomps2<-function(dat){
combos <- combn(nrow(dat), 2)
dlearn<-adply(combos, 2, function(x) {
out <- data.frame(dat[x[1] , ] - ddat[x[2] , ])
return(out)
}
)
}
allcomps2(mtcars)
library(plyr)
allcomps2<-function(dat){
combos <- combn(nrow(dat), 2)
dlearn<-adply(combos, 2, function(x) {
out <- data.frame(dat[x[1] , ] - dat[x[2] , ])
return(out)
}
)
}
allcomps2(mtcars)
library(plyr)
allcomps2<-function(dat){
combos <- combn(nrow(dat), 2)
dlearn<-adply(combos, 2, function(x) {
out <- data.frame(dat[x[1] , ] - dat[x[2] , ])
return(out)
}
)
return(out)
}
allcomps2(mtcars)
library(plyr)
allcomps2<-function(dat){
combos <- combn(nrow(dat), 2)
dlearn<-adply(combos, 2, function(x) {
out <- data.frame(dat[x[1] , ] - dat[x[2] , ])
x<-out
}
)
return(x)
}
allcomps2(mtcars)
combos <- combn(nrow(mtcars), 2)
allcomps2<-function(dataf){
combos <- combn(nrow(mtcars), 2)
dout<-adply(combos, 2, function(x) {
out <- data.frame(dlearn[x[1] , ] - dlearn[x[2] , ])
return(out)
}
)
return(dout)
}
allcomps2(mtcars)
allcomps2<-function(dataf){
combos <- combn(nrow(dataf), 2)
dout<-adply(combos, 2, function(x) {
out <- data.frame(dataf[x[1] , ] - dataf[x[2] , ])
return(out)
}
)
return(dout)
}
allcomps2(mtcars)
